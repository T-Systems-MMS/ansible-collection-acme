---
- name: install prerequisites on localhost
  delegate_to: localhost
  package:
    name:
      - python-boto3
    state: present
    use: "{{ letsencrypt_prerequisites_packagemanager }}"

- name: validate challenge only if it is created or changed
  when: challenge is changed
  block:
    - name: create challenge file with SAN domain for s3 upload
      copy:
        dest: "acme-challenge.{{ item }}"
        content: "{{ challenge['challenge_data'][item]['http-01']['resource_value'] }}"
        mode: 0640
      loop: "{{ domain.subject_alt_name }}"
      when:
        - domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - challenge['challenge_data'][item] is defined

    - name: upload challenge file for SAN domain to s3 bucket
      aws_s3:
        aws_access_key: "{{ letsencrypt_s3_access_key }}"
        aws_secret_key: "{{ letsencrypt_s3_secret_key }}"
        bucket: "{{ letsencrypt_s3_bucket_name }}"
        object: "{{ challenge['challenge_data'][item]['http-01']['resource'] }}"
        src: "acme-challenge.{{ item }}"
        mode: "put"
        region: "{{ letsencrypt_s3_config_region }}"
        permission: "public-read"
      loop: "{{ domain.subject_alt_name }}"
      when:
        - domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - challenge['challenge_data'][item] is defined

    # validate certficate
    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      acme_certificate:
        account_key_src: "{{ account_key_path }}"
        account_email: "{{ account_email }}"
        csr: "{{ csr_path }}"
        cert: "{{ cert_path }}"
        fullchain: "{{ fullchain_path }}"
        chain: "{{ intermediate_path }}"
        challenge: http-01
        force: "{{ force_renewal | default(false) }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        remaining_days: "{{ remaining_days }}"
        data: "{{ challenge }}"

    - name: remove challenge file for SAN domain from s3 bucket
      aws_s3:
        aws_access_key: "{{ letsencrypt_s3_access_key }}"
        aws_secret_key: "{{ letsencrypt_s3_secret_key }}"
        bucket: "{{ letsencrypt_s3_bucket_name }}"
        object: "{{ challenge['challenge_data'][item]['http-01']['resource'] }}"
        mode: "delobj"
        region: "{{ letsencrypt_s3_config_region }}"
      loop: "{{ domain.subject_alt_name }}"
      when:
        - domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - challenge['challenge_data'][item] is defined

    - name: remove challenge file for SAN domain from fs
      file:
        dest: "acme-challenge.{{ item }}"
        state: absent
      loop: "{{ domain.subject_alt_name }}"
      when:
        - domain.subject_alt_name is defined
        # only runs if the challenge is run the first time, because then there is challenge_data
        - challenge['challenge_data'][item] is defined
